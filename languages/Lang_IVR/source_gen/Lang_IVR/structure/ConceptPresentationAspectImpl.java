package Lang_IVR.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_AddNewCategory;
  private ConceptPresentation props_Back;
  private ConceptPresentation props_Command;
  private ConceptPresentation props_DialPadTemplate;
  private ConceptPresentation props_DoAct;
  private ConceptPresentation props_IncludeActivities;
  private ConceptPresentation props_MenuList;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.AddNewCategory:
        if (props_AddNewCategory == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_AddNewCategory = cpb.create();
        }
        return props_AddNewCategory;
      case LanguageConceptSwitch.Back:
        if (props_Back == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Back");
          props_Back = cpb.create();
        }
        return props_Back;
      case LanguageConceptSwitch.Command:
        if (props_Command == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Command = cpb.create();
        }
        return props_Command;
      case LanguageConceptSwitch.DialPadTemplate:
        if (props_DialPadTemplate == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("KCL Dialpad template2");
          cpb.presentationByName();
          cpb.icon(IconContainer.RESOURCE_a0a3a0a3b0i);
          props_DialPadTemplate = cpb.create();
        }
        return props_DialPadTemplate;
      case LanguageConceptSwitch.DoAct:
        if (props_DoAct == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_DoAct = cpb.create();
        }
        return props_DoAct;
      case LanguageConceptSwitch.IncludeActivities:
        if (props_IncludeActivities == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Add new Activity");
          props_IncludeActivities = cpb.create();
        }
        return props_IncludeActivities;
      case LanguageConceptSwitch.MenuList:
        if (props_MenuList == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("SubMenu");
          props_MenuList = cpb.create();
        }
        return props_MenuList;
    }
    return null;
  }
}
